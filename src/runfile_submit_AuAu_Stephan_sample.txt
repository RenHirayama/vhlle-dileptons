#!/bin/bash
#SBATCH --partition=parallel
#SBATCH --constraint=dual
#SBATCH --ntasks=1
#SBATCH --mem=MaxMemPerNode
#SBATCH --time=40:55:00
#SBATCH --array=0-11:1
#SBATCH --error=/scratch/agstoecker/endres/dilep_files/coarse/AuAu_15/error1.err
#SBATCH --output=/scratch/agstoecker/endres/dilep_files/coarse/AuAu_15/error1.log

coarse() {
     # Print the given "global task number" with leading spaces
     # followed by the hostname of the executing node.

     K=$(printf $1)
     #KK=$(printf $1)
     KK=$(($K + 12))

     cd /home/agstoecker/endres/crse_smash

     export model=1

     export vacuum=0
     export gridsize=45
     export cellsize=0.8d0
     export eos=4
     export leptype=0
     export pikchem=1
     export baryons=1
     export rates=4
     export output=1
# FOR PHOTON calculation:
     export hgpar=1
     export phqgp=1
# NA60 Dileptons:
     export fourpimix=1
     export latqgp=1
     export na60mode=0
 
     export ftn68=/scratch/agstoecker/endres/dilep_files/coarse/AuAu_15/out_nsf_c_crse_eo4_$K.f68
     export ftn69=/scratch/agstoecker/endres/dilep_files/coarse/AuAu_15/out_nsf_c_crse_eo4_$K.f69
     export ftn70=/scratch/agstoecker/endres/dilep_files/coarse/AuAu_15/out_nsf_c_crse_eo4_$K.f70
     export ftn71=/scratch/agstoecker/endres/dilep_files/coarse/AuAu_15/out_nsf_c_crse_eo4_$KK.f71
     export ftn72=/scratch/agstoecker/endres/dilep_files/coarse/AuAu_15/out_nsf_c_crse_eo4_$K.f72

     export random=$(printf '%d' 0x$(xxd -l 3 -ps -c 10 /dev/urandom))

     cat /scratch/agstoecker/endres/urqmd_files/f14/AuAu_15/AuAu_15_ctrl_$K.f14 | ./coarse > /scratch/agstoecker/endres/dilep_files/coarse/AuAu_15/out_nsf_c_crse_eo4_$K.out

     # Do nothing, just sleep for a moment
     sleep 1
}

#
# Every 1-task block will be run on a separate node.

for I in $(seq 1); do
     # This is the "global task number". Since we have an array of
     # 200 tasks, J will range from 1 to 200.
     J=$(($SLURM_ARRAY_TASK_ID+$I))

     # Put each task into background, so that tasks are executed
     # concurrently.

      coarse $J & 

     # Wait a little before spawning the next one.
     sleep 1
done

# Wait for all child processes to terminate.
wait